# Custom SSH_AUTH_SOCK env variable
ssh_auth_sock:

# enable tmux support
use_tmux: true

# user to use when installing AUR packages,
# will automatically be created and given correct permissions
# should not be main user as it will also be excluded from Login Screen
aur_user: aur

# Manually export DISPLAY variable to localhost (useful for WSL)
x11_export_display: false

# secondary shell is a unstable non-login shell that gets loaded in rc file
# for login shell
# supported default shells: xonsh
# set to 'none' if you do not want to configure a secondary shell
secondary_shell: xonsh

## Git Settings

# name and email for git
# set both to 'none' to skip configuring Git
git_email: cbailey@mort.is
git_name: "Christopher Bailey"

# public GPG signing key to use for git
# Set this to 'none', but above if you want to configure git
# without a signing key
git_signing_key: 895776E4530BBFF3

## GPG Helper settings

# Location of GPG agents for gpg-remote helper script
# default location locally is /run/user/1000/gnupg/S.gpg-agent
#   where 1000 = your user's uid
gpg_local_agent: /run/user/1000/gnupg/S.gpg-agent
gpg_remote_agent: /run/user/1000/gnupg/S.gpg-agent

# WSL specific GPG settings to get Windows 10 GPG Agent in WSL
# See https://codingnest.com/how-to-use-gpg-with-yubikey-wsl/ for setup
wsl_npiperelay_path: none
windows_gpg_agent_path: none

## Cloud Provider Settings

# cloud provider(s) to configure
# supported: onedrive
# set to empty value to not install a cloud provider
cloud_providers:

# Absolute path to sync list file
# https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md#selective-sync
# Ubuntu requires 19.04
onedrive_sync_list: none

## Desktop Settings

# DEs to install and setup
# supported: kde, gnome, gnome-ubuntu
# only applies to Linux
# gnome-ubuntu is only avaible for Ubuntu. It installs the default full GNOME DE that comes with Ubuntu
# set to empty value to not manage desktop environments
# NOTE: GNOME does not support managing themes
desktop_environments:

# KDE theme to install
# path must end in /
#
# This theme is only copied over, you still have to manually
# enable it in system settings
kde_theme:

# Display Manager to use
# supported: sddm, gdm
# only applies to Linux
# set to 'none' to not configure display manager
# NOTE: See "Changing Display Managers" in README about changing your default
# NOTE: GDE does not support managing themes
desktop_display_manager: none

# Whether or not you already have Plymouth installed and configured
# (if you are on Ubuntu, the answer is probably yes)
desktop_display_manager_use_plymouth: false

# Display Manager theme to install
# path must end in /
# Theme must be fore the display manager you selected above
desktop_display_manager_theme: none

# Path to PNG image to use for User Icon
desktop_display_manager_user_icon: none

# Network Manager to use
# supported: networkmanager
# only applies to Linux
# set to 'none' to not configure network manager
desktop_network_manager: none

# Network Manager connection configs
# Set to empty to not configure any connections
network_manager_configs:

## Graphics Drivers Settings
# WARNING: Only support open source drivers
install_intel_drivers: false

install_nvidia_drivers: false

## Extras Settings

# Add extra PPA repos, Ubuntu only
# set to empty to skip
extra_ppas:

# Install list of arbitary packages
# set to '[]' to not install any
extra_packages:
    - docker
    - docker-compose
    - netdata
    - nfs-utils

# Set to '[]' to skip installing AUR packages
extra_aur_packages:
    - portainer-bin
    - pacoloco-git

# Extra systemd services to enable
# Set to '[]' to skip
extra_systemd:
    - docker.service
    - netdata.service
    - portainer.service
    - pacoloco.service

# extra arbitary user directories to make relative to ~
# set to '[]' to not create any
extra_user_dirs: []

# extra arbitary user files to copy
# set to empty to not copy any
extra_user_files: []

# extra arbitary system directories to create
# set to '[]' to not copy any
extra_system_dirs:
    - { path: /unraid/backup, owner: root, recurse: false, mode: '777' }
    - { path: /unraid/public, owner: root, recurse: false, mode: '777' }
    - { path: /unraid/media, owner: root, recurse: false, mode: '777' }
    - { path: /opt/pacoloco/, owner: pacoloco, recurse: false, mode: '755' }

# extra arbitary system files to copy
# set to '[]' to not copy any
extra_system_files:
    - { src: user/mortis-configs/templates/docker.json, dest: /etc/docker/daemon.json }
    - { src: user/mortis-configs/templates/netdata/.opt-out, dest: /etc/netdata/.opt-out-from-anonymous-statistics }
    - { src: user/mortis-configs/templates/netdata/apps_groups.conf, dest: /etc/netdata/apps_groups.conf }
    - { src: user/mortis-configs/templates/netdata/netdata.server-2.conf, dest: /etc/netdata/netdata.conf }
    - { src: user/mortis-configs/templates/netdata/python.d.conf, dest: /etc/netdata/python.d.conf }
    - { src: user/mortis-configs/templates/sysctl.conf, dest: /etc/sysctl.d/90-extra-tuning.conf }
    - { src: user/mortis-configs/templates/netdata/sudo, dest: /etc/sudoers.d/netdata-allow-to-sudo-smbstatus }
    - { src: user/mortis-configs/templates/netdata/stream.source.conf, dest: /etc/netdata/stream.conf }
    - { src: user/mortis-configs/templates/mirrorlist.archlinux, dest: /etc/pacman.d/mirrorlist }
    - { src: user/mortis-configs/templates/netdata/health.d/cgroups.conf, dest: /etc/netdata/health.d/cgroups.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/disks.conf, dest: /etc/netdata/health.d/disks.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/net.conf, dest: /etc/netdata/health.d/net.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/netfilter.conf, dest: /etc/netdata/health.d/netfilter.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/softnet.conf, dest: /etc/netdata/health.d/softnet.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/tcp_resets.conf, dest: /etc/netdata/health.d/tcp_resets.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/udp_errors.conf, dest: /etc/netdata/health.d/udp_errors.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/web_log.conf, dest: /etc/netdata/health.d/web_log.conf }
    - { src: user/mortis-configs/templates/netdata/health.d/apcupsd.conf, dest: /etc/netdata/health.d/apcupsd.conf }
    - { src: user/mortis-configs/templates/pacoloco.yml, dest: /etc/pacoloco.yaml }

# extra drives to mount
# set to '[]' to not mount anything
extra_mounts:
    - { path: /unraid/backup, src: unraid-server.wl.mort.is:/mnt/user/backup, fstype: nfs, opts: defaults,timeo=900,retrans=5,_netdev }
    - { path: /unraid/public, src: unraid-server.wl.mort.is:/mnt/user/public, fstype: nfs, opts: defaults,timeo=900,retrans=5,_netdev }
    - { path: /unraid/media, src: unraid-server.wl.mort.is:/mnt/user/media, fstype: nfs, opts: defaults,timeo=900,retrans=5,_netdev }

## Network Utils Settings

# Install and set up OpenSSH Server
setup_sshd: false

# Install and set up Samba Network Shares
setup_samba: true

# path to optional Samba config
# set to 'none' to not copy one
samba_config: user/mortis-configs/templates/smb.conf

# Install and set up NFS Network Shares
setup_nfs: true

# path to optional NFS config
# set to 'none' to not copy one
nfs_config: user/mortis-configs/templates/exports.server-2

# Install and setup iptable firewall
setup_iptables: false

# IP address or network range (CIDR) of IP addresses without restrictions
# set empty to not have any
iptables_whitelisted_networks: []

# TCP Ports to whitelist
# set to '[]' to not have any
iptables_whitelisted_tcp_ports: []
# - { port: 22, source: 1.2.3.4 }
# - { port: 80 }

# UDP Ports to whitelist
# set to '[]' to not have any
iptables_whitelisted_udp_ports: []
# - { port: 22, source: 1.2.3.4 }
# - { port: 80 }

## Dev Utils Settings

# setup and install Docker
setup_docker: false

# optional Docker daemon.json file
# set to 'none' to not copy one
docker_config: none

# optional extra docker host option (-H)
# set to 'none' to only run on default
# unix socket (unix:///var/run/docker.sock)
extra_docker_host: none

# setup and install NodeJS
setup_nodejs: false

# setup and install Kubernetes
setup_k8s: false

# setup and install Google Cloud SDK
setup_gcloud: false

# list of git repos to clone
# set to '[]' to not clone any
git_repos: []
    # - {
    #     url: "git@github.com:AngellusMortis/system-manager.git",
    #     dest: dev/system-manager,
    #     branch: master,
    #   }
    # - {
    #     url: "git@github.com:AngellusMortis/mortis-configs.git",
    #     dest: dev/system-manager/files/user/mortis-configs,
    #     branch: master,
    #   }

## Extra Personalization settings

# Customize Boot
customize_boot: false

# Grub background
# WARNING: Do NOT set a Grub background and a Grub theme
grub_background: none

# Grub theme to install
# path must end in /
# there must be a theme.txt file
grub_theme: none
# grub_theme: user/mortis-configs/grub/theme/

# Plymouth theme to install
# path must end in /
# there must be a theme.txt file
plymouth_theme: none


## Crons
# Crons to set up
# set to '[]' to skip
extra_crons: []

## nginx/Let's Encrypt

# email to use for Let's Encrypt certs
# set to empty to not config nginx/Let's encrypt
letencrypt_email: cbailey@mort.is

# domains to get SSL certs for
# set to '[]' to not config nginx/Let's encrypt
letencrypt_domains:
  - "wl.mort.is"
  - "*.wl.mort.is"

# nginx proxies to set up
# set to '[]' to not config nginx reverse proxies
nginx_proxies:
# server-2
- { domain: 'docker.wl.mort.is', ip: 'server-2-f1.wl.mort.is', port: '9000', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "core" }
- { domain: 'collect.wl.mort.is', ip: 'server-2-f1.wl.mort.is', port: '19999', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, proto_header: http, group: "core" }
- { domain: 'influxdb.wl.mort.is', ip: 'server-2-f1.wl.mort.is', port: '8086', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "core" }
- { domain: 'monitor.wl.mort.is', ip: 'server-2-f1.wl.mort.is', port: '3000', protocol: http, type: 'proxy', cors: false, media_root: null, static_root: null, internal: false, stats_ip: null, group: "core" }
- { domain: 'prometheus.wl.mort.is', ip: 'server-2-f1.wl.mort.is', port: '9090', protocol: http, type: 'proxy', cors: false, media_root: null, static_root: null, internal: false, stats_ip: null, group: "core" }
- { domain: 'media.wl.mort.is', ip: 'server-2.wl.mort.is', port: '3579', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: false, stats_ip: null, websockets: false, group: "media" }
- { domain: 'plex.wl.mort.is', ip: 'server-2.wl.mort.is', port: '32400', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: false, stats_ip: null, group: "media" }
- { domain: 'jellyfin.wl.mort.is', ip: 'server-2.wl.mort.is', port: '8096', protocol: http, type: 'proxy', cors: false, media_root: null, static_root: null, internal: false, stats_ip: null, group: "media" }

- { domain: 'mc.wl.mort.is', custom: true, custom_file: user/mortis-configs/templates/nginx/mc.wl.mort.is.conf, group: "games" }

# unraid
- { domain: 'backup.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '7810', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "media" }
- { domain: 'movies.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '7878', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "media" }
- { domain: 'music.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '8686', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "media" }
- { domain: 'sync.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '8384', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "media" }
- { domain: 'television.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '8989', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "media" }
- { domain: 'unraid.wl.mort.is', ip: 'unraid-server.wl.mort.is', port: '7443', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "core" }

# other
- { domain: 'unifi.wl.mort.is', ip: '192.168.1.1', port: '443', protocol: https, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null, group: "core" }

# - { domain: 'dev.wl.mort.is', ip: 'server-2.wl.mort.is', port: '9000', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null }
# - { domain: 'download.wl.mort.is', ip: '10.8.0.14', port: '8112', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null }
# - { domain: 'index.wl.mort.is', ip: '10.8.0.14', port: '9117', protocol: http, type: 'proxy', cors: true, cors_domain: 'mort.is', media_root: null, static_root: null, internal: true, stats_ip: null }


# boundlexx
- { domain: 'local-boundlexx.wl.mort.is', custom: true, custom_file: user/mortis-configs/templates/nginx/local-boundlexx.wl.mort.is.conf, group: "boundlexx", env: "local" }
- { domain: 'testing-boundlexx.wl.mort.is', custom: true, custom_file: user/mortis-configs/templates/nginx/testing-boundlexx.wl.mort.is.conf, group: "boundlexx", env: "testing" }

- { domain: 'boundlexx.wl.mort.is', custom: true, custom_file: user/mortis-configs/templates/nginx/boundlexx.wl.mort.is.conf, group: "boundlexx" }
- { domain: 'boundlexx.app', ip: 'server-2.wl.mort.is', type: 'uwsgi', socket: 'server-2.wl.mort.is:12000', cors: false, media_root: null, static_root: '/mnt/boundlexx/static', internal: false, stats_ip: null, group: "boundlexx" }
- { domain: 'origin.boundlexx.app', ip: 'server-2.wl.mort.is', type: 'uwsgi', socket: 'server-2.wl.mort.is:12000', cors: false, media_root: null, static_root: '/mnt/boundlexx/static', internal: false, stats_ip: null, group: "boundlexx" }
- { domain: 'metabase.boundlexx.app', ip: 'server-2-f1.wl.mort.is', port: '12100', protocol: http, type: 'proxy', cors: false, media_root: null, static_root: null, internal: false, stats_ip: null, group: "boundlexx" }

# promtail / Loki setup
loki_target: "http://server-2.wl.mort.is:3100/loki/api/v1/push"
